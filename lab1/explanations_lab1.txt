#Adam Taback, 1008945778, adam.taback@mail.utoronto.ca
#Seung Jae Yang, 1007171613, seungjae.yang@mail.utoronto.ca

Part 1:

We modified exploit1.c by adding an extra newline (\n) character at the end of args[0].
This means programName in target1.c does not have a terminating character ('\0'), so when
it is printed, printf keeps reading up the stack until it reaches a '\0'. The thing after
it in the stack is secretBuffer, so that is read after programName, and produces the output.

Part 2:

We make arg[0] have 10 chars, so no terminating character is in programName. This means when
when it is printed, the program keeps going until it sees a terminating character and prints
out another memory addresses stored in the stack. We then calculated the offset from that 
address (0x2A) and subtracted from the leaked address to get the address of programName.

Part 3:

In this part, we take advantage of the buffer overflow vulnerability to execute our shellcode. 
We create a buffer that contains our shellcode and the address of programName, the rest padded
with NOPs. We place the &programName at RIP, so when the program returns, it will jump to the
shellcode and run it. This is because the shellcode is placed at the address of programName, 
as the buffer is copied into programName. To place &programName at RIP, we calculated the offset,
which is &programName - (address stored in RIP), using GDB.

Our malicious buffer looks like this:

&programName          RIP
    | shellcode | NOPs | &programName | NOPs |

Part 4:

Here we take advantage of the double free vulnerability to redirect execution to our shellcode when
the wrong variable is freed, by creating fake tags.

We create a buffer that will be copied into p, which is structured as follows:

p                                 q
| 8B fake tag 1 | shellcode + NOP | 8B fake tag 2 |

Here is the structure of the fake tags:

fake tag 1 (p):
    l: JMP to shellcode + NOPs
    r: NOPs + FREEBIT

fake tag 2 (q):
    l: &p
    r: &RIP

Then when free is called on q the second time, it consolidates left, causing the following: 

p->r = q->r == &RIP
(q->r)->l == &RIP (as l is just offset 0) = p 
q = p. 

This means when the program returns, it reads the address in RIP, goes to p, which jumps to the 
shellcode, and runs it.

Part 5:

The vulnerability stems from snprintf(buffer, BUFFER_LEN, args), where user-controlled args is used 
directly as the format string. This allows memory leaks (%x) and arbitrary memory writes (%hn). We 
exploit this by injecting shellcode and using format specifiers (%_x and %_$hn) to overwrite the return 
address, redirecting execution to our shellcode.

Payload Structure: Format String | Return Addresses | Shellcode

- The return address we want to overwrite is stored at 0x56820ce0, and we redirect execution to
our shellcode is stored at 0x56820ce0, which is inside alginedArgs buffer.

- Format string writes happen in 2-byte chunks. We use %_x's to prints out enough characters 
that represent the 2-byte values that we want to write. We write to memory using %hn.

- The format string "aaaaaa%3290x%10$hn%18850x%11$hn" is 31 chars + null byte = 32 bytes, meaning it is
8-byte memory aligned. The extra characters at the beginning are padding to make it 8-byte aligned.

- There are two parts of the return addresses in the payload: the bottom (0x56820ec8) and the address
2 bytes above that (0x56820eca). This is so that when we write, we're writing the 2 bytes to those locations.
Also, these return addresses are zero-padded in upper 32 bits using empty strings (null terminator considered).

- The shellcode is appended at the end of the payload to avoid the possibility of the exploit
not working properly due to changing shellcode length, which might cause memory misalignment.

